generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  firstName String
  lastName  String
  email     String         @unique
  password  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  trips     TripsOnUsers[]
}

model Itinerary {
  id         Int                   @id @default(autoincrement())
  tripId     Int
  content    Json
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  trip       Trip                  @relation(fields: [tripId], references: [id], onDelete: Cascade)
  places     PlacesOnItineraries[]
  resumeFile ResumeFile?
}

model ResumeFile {
  id          Int       @default(autoincrement())
  itineraryId Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Bytes
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@id([id, itineraryId])
}

model Place {
  id          Int                   @id @default(autoincrement())
  idApi       Int                   @unique
  lat         Float
  lng         Float
  tags        Json
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  itineraries PlacesOnItineraries[]
}

model PlacesOnItineraries {
  itineraryId Int
  placeId     Int
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  place       Place     @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@id([itineraryId, placeId])
}

model Trip {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  itineraries Itinerary[]
  users       TripsOnUsers[]
}

model TripsOnUsers {
  userId    Int
  tripId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, tripId])
}
